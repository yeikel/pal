let rec rprint t spaces = 

   let rec tuple t n =
      n eq 1 ->
        Isinteger (t n) or Isstring (t n) ->
            spaces
            @Conc (Isinteger (t n) -> ItoS (t n)
                |  Isstring  (t n) -> t n
                |  'error')
            @Conc '(' 
            @Conc ItoS(Order t - 1)
            @Conc ')'
            @Conc '\n'
         | 'error'
      | tuple t (n-1) @Conc rprint (t n) (spaces @Conc '...') 
   in 

   Isinteger t -> spaces 
   		  @Conc (ItoS t)
               	  @Conc '(0)'
		  @Conc '\n'
   | Isstring  t -> spaces 
   		    @Conc t
              	    @Conc '(0)'
		    @Conc '\n'
   | Istuple   t -> tuple t (Order t) 
   | 'error'

in
let print t =  rprint t '' 

in Print ( print ('+',('-',4,('+',5,6)), 3, ('*',7,8) )
         )
          
